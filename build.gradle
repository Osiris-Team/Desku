/*
 * This file was generated by the Gradle 'init' task.
 */

plugins {
    id 'java-library'
    id 'maven-publish'
}

repositories {
    mavenLocal()
    maven {
        url = uri('https://jitpack.io')
    }

    maven {
        url = uri('https://repo.maven.apache.org/maven2/')
    }
}

dependencies {
    api 'com.github.Osiris-Team:Easy-Java-Events:1.9.0'
    api 'com.github.Osiris-Team:jlib:18.4'
    api 'com.github.Webview:webview_java:1.3.0'
    api 'org.nanohttpd:nanohttpd:2.3.1'
    api 'org.nanohttpd:nanohttpd-websocket:2.3.1'
    api 'org.java-websocket:Java-WebSocket:1.5.3'

    implementation 'org.jetbrains:annotations:24.0.1'

    testImplementation 'org.junit.jupiter:junit-jupiter:5.7.2'
    testImplementation 'com.github.javaparser:javaparser-core:3.25.3'
}

test {
    useJUnitPlatform()
}

group = 'com.osiris.desku'
version = '1.0.5'
description = 'Desku'
sourceCompatibility = 1.11
targetCompatibility = 1.11

java {
    withSourcesJar()
}


// Ensure that everything other than classes/.java files are also included in the final jar
// This should also be included in your project if you want to easily load resources.
sourceSets {
    main {
        resources {
            srcDirs = ["src/main/java", "src/main/resources"]
            include '**/*' // Include everything (no .java by default)
        }

    }
}
// This must also be included if you want to generate the sources jar without issues
tasks.withType(Jar).configureEach { duplicatesStrategy = DuplicatesStrategy.EXCLUDE }


publishing {
    publications {
        maven(MavenPublication) {
            from(components.java)
        }
    }
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

wrapper {
    gradleVersion = "8.1.1"
    distributionType = Wrapper.DistributionType.ALL
}