package com.osiris.desku;

import com.osiris.desku.swing.DevToolsDialog;
import com.osiris.desku.swing.FakeJFrame;
import com.osiris.desku.swing.Swing;
import com.osiris.desku.swing.events.LoadStateChange;
import com.osiris.desku.ui.Component;
import com.osiris.events.Event;
import com.osiris.jlib.logger.AL;
import org.cef.browser.CefBrowser;
import org.cef.browser.CefFrame;
import org.cef.callback.CefQueryCallback;
import org.cef.handler.CefMessageRouterHandlerAdapter;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;

import javax.swing.*;
import java.awt.*;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.File;
import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.StandardCopyOption;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.atomic.AtomicBoolean;
import java.util.concurrent.locks.ReentrantLock;
import java.util.function.Consumer;

/**
 * Native window with HTML content that is generated by provided {@link Route}.
 */
public class UI {
    private static final ReentrantLock access = new ReentrantLock();
    private static volatile UI current = null;
    public volatile boolean isLoading = true;
    /**
     * Relevant when wanting HTML load state of {@link #browser}.
     */
    public final Event<LoadStateChange> onLoadStateChanged = new Event<>();
    /**
     * Last loaded html.
     */
    public final Route route;
    public final Component<?> content;
    /**
     * Not thread safe, access inside synchronized block.
     */
    public final HashMap<String, List<Component<?>>> listenersAndComps = new HashMap<>();
    public FakeJFrame offscreenFrame;
    public JFrame onscreenFrame;
    public CefBrowser browser;
    public java.awt.Component browserUI;

    public UI(Route route) throws IOException {
        this(route, false, 70, 60);
    }

    public UI(Route route, boolean isTransparent, int widthPercent, int heightPercent) throws IOException {
        access.lock();
        current = this;

        this.route = route;
        this.content = route.loadContent();
        onLoadStateChanged.addAction((e) -> {
            if (e.isLoading) return;
            isLoading = false;
        });

        current = null;
        access.unlock();

        init("file:///" + snapshotToTempFile().getAbsolutePath(), isTransparent, widthPercent, heightPercent);
    }

    /**
     * Always null, except when code is running inside... <br>
     * - {@link #access(Runnable)} <br>
     * - constructor {@link #UI(Route, boolean, int, int)} when generating this UIs' HTML  for the first time. <br>
     * - any triggered JavaScript event that was registered via {@link #registerJSListener(String, Component, Consumer)}. <br>
     * or {@link #set(UI, Thread...)} was called before.
     */
    public static UI get() {
        if (current != null)
            return current;
        else {
            // Current code is not inside access(), thus we check the thread
            synchronized (threadsAndUIs) {
                return threadsAndUIs.get(Thread.currentThread());
            }
        }
    }

    private static final Map<Thread, UI> threadsAndUIs = new HashMap<>();

    /**
     * Maps the provided threads to the provided UI, so that when calling
     * {@link UI#get()} inside those threads it returns the provided UI.
     */
    public static void set(UI ui, Thread... threads) {
        synchronized (threadsAndUIs) {
            for (Thread t : threads) {
                threadsAndUIs.put(t, ui);
            }
        }
    }

    public static void remove(Thread... threads) {
        synchronized (threadsAndUIs) {
            for (Thread t : threads) {
                threadsAndUIs.remove(t);
            }
        }
    }

    /**
     * Access this window synchronously now.
     * Also sets {@link #current} to this window.
     */
    public UI access(Runnable code) {
        access.lock();
        current = this;
        code.run();
        current = null;
        access.unlock();
        return this;
    }

    /**
     * To display a simple browser window, it suffices completely to create an
     * instance of the class CefBrowser and to assign its UI component to your
     * application (e.g. to your content pane).
     * But to be more verbose, this CTOR keeps an instance of each object on the
     * way to the browser UI.
     */
    private void init(String startURL, boolean isTransparent, int widthPercent, int heightPercent) {
        try {
            AL.info("Starting new window with url: " + startURL + " transparent: " + isTransparent + " width: " + widthPercent + "% height: " + heightPercent + "%");
            AL.info("Please stand by...");
            App.windows.add(this);
            boolean isOffscreen = AppStartup.isOffscreenRendering;
            AtomicBoolean isLoaded = new AtomicBoolean(false);
            onLoadStateChanged.addAction((action, event) -> {
                if (event.isError() || !event.isLoading) {
                    action.remove();
                    isLoaded.set(true);
                }
            }, Exception::printStackTrace);
            // (4) One CefBrowser instance is responsible to control what you'll see on
            //     the UI component of the instance. It can be displayed off-screen
            //     rendered or windowed rendered. To get an instance of CefBrowser you
            //     have to call the method "createBrowser()" of your CefClient
            //     instances.
            //
            //     CefBrowser has methods like "goBack()", "goForward()", "loadURL()",
            //     and many more which are used to control the behavior of the displayed
            //     content. The UI is held within a UI-Compontent which can be accessed
            //     by calling the method "getUIComponent()" on the instance of CefBrowser.
            //     The UI component is inherited from a java.awt.Component and therefore
            //     it can be embedded into any AWT UI.
            //browser = new CefBrowserWrOsr(App.cefClient, startURL, null);
            browser = App.cefClient.createBrowser(startURL, isOffscreen, isTransparent);
            if (isOffscreen) {
                // TODO JCEF has problems with triggering load events when in osr mode
                // TODO thus the below will not work correctly.
                isLoaded.set(true);
                offscreenFrame = new FakeJFrame();
                browserUI = browser.getUIComponent();

                // (6) All UI components are assigned to the default content pane of this
                //     JFrame and afterwards the frame is made visible to the user.
                offscreenFrame.add(browserUI, BorderLayout.CENTER);
                if (widthPercent <= 0 || heightPercent <= 0) {
                    widthPercent = 100;
                    heightPercent = 100;
                }
                width(widthPercent);
                height(heightPercent);
                //offscreenFrame.setIconImage(App.getIcon());
                //Swing.center(offscreenFrame);
                offscreenFrame.revalidate();
                offscreenFrame.setVisible(true);
                offscreenFrame.startRender((frame) -> {
                }, 250);
            } else {
                onscreenFrame = new JFrame(App.name);
                browserUI = browser.getUIComponent();

                // (6) All UI components are assigned to the default content pane of this
                //     JFrame and afterwards the frame is made visible to the user.
                onscreenFrame.getContentPane().add(browserUI, BorderLayout.CENTER);
                if (widthPercent <= 0 || heightPercent <= 0) {
                    widthPercent = 100;
                    heightPercent = 100;
                }
                width(widthPercent);
                height(heightPercent);
                onscreenFrame.setIconImage(App.getIcon());
                Swing.center(onscreenFrame);
                onscreenFrame.revalidate();
                onscreenFrame.setVisible(true);

                // (7) To take care of shutting down CEF accordingly, it's important to call
                //     the method "dispose()" of the CefApp instance if the Java
                //     application will be closed. Otherwise you'll get asserts from CEF.
                UI _this = this;
                onscreenFrame.addWindowListener(new WindowAdapter() {
                    @Override
                    public void windowClosing(WindowEvent e) {
                        App.windows.remove(_this);
                        onscreenFrame.dispose();
                    }
                });
            }

            long ms = System.currentTimeMillis();
            // JavaScript cannot be executed before the page is loaded
            while (!isLoaded.get()) Thread.yield();
            AL.info("Init took " + (System.currentTimeMillis() - ms) + "ms for " + this);
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }

    public void close() {
        browser.doClose();
        App.windows.remove(this);
    }

    /**
     * Creates a snapshot of the current UI (the full HTML page) <br>
     * and returns it as {@link Document} for further processing. <br>
     * Note that changes to it won't be reflected in the actual UI.
     */
    public Document getSnapshot() {
        Document html = route.getDocument();
        Element outlet = html.getElementById("outlet");
        content.updateAll();
        outlet.appendChild(content.element);
        return html;
    }

    public File getDir() {
        // TODO in testing this resolves to the same directory after restarting even though it should be a new one
        // this results in cached files in that directory like images not getting updated, if changed.
        File dir = new File(App.tempDir + "/" + Integer.toHexString(hashCode()));
        dir.mkdirs();
        return dir;
    }

    /**
     * @see #snapshotToTempFile(Document)
     */
    public File snapshotToTempFile() throws IOException {
        return snapshotToTempFile(null);
    }

    /**
     * Creates a snapshot and writes the HTML to a file in the temp folder of the current user. <br>
     * If the path for this route is "/persons/john" for example then the html file will be created at: <br>
     * {@link App#tempDir}/{@link #hashCode()}/persons/john.html <br>
     * Note that the hash code is in hex format.
     *
     * @return the generated html file.
     */
    public File snapshotToTempFile(Document snapshot) throws IOException {
        File file = new File(getDir()
                + (route.path.equals("/") ? "/root.html" : (route.path + ".html")));
        if (snapshot == null) snapshot = getSnapshot();

        // Create symbolic link in current folder to global-styles.css
        // Symbolic links can't be created in temp folder?
        File link = new File(file.getParentFile() + "/" + App.styles.getName());
        AL.info("Copy of global styles: " + link);
        synchronized (App.styles) {
            if (!link.exists()) {
                link.getParentFile().mkdirs();
                link.createNewFile();
            }
            Files.copy(App.styles.toPath(), link.toPath(), StandardCopyOption.REPLACE_EXISTING);
        }
        Element elLink = new Element("link");
        elLink.attr("rel", "stylesheet");
        elLink.attr("href", App.styles.getName());
        snapshot.getElementsByTag("head").get(0).appendChild(elLink);

        // Write html to temp file
        AL.info("Generate: " + file);
        file.getParentFile().mkdirs();
        if (!file.exists()) file.createNewFile();
        Files.write(file.toPath(), snapshot.outerHtml().getBytes(StandardCharsets.UTF_8));
        return file;
    }

    /**
     * @see #width(int)
     */
    public void widthFull() {
        width(100);
    }

    /**
     * This invalidates the container and thus to see changes in the UI
     * make sure execute {@link java.awt.Component#revalidate()} manually.
     *
     * @param widthPercent 0 to 100% of the parent size (screen if null).
     */
    public void width(int widthPercent) {
        if (onscreenFrame != null) updateWidth(onscreenFrame.getParent(), onscreenFrame, widthPercent);
        if (offscreenFrame != null) updateWidth(offscreenFrame.getParent(), offscreenFrame, widthPercent);
    }

    /**
     * @see #height(int)
     */
    public void heightFull() {
        height(100);
    }

    /**
     * This invalidates the container and thus to see changes in the UI
     * make sure execute {@link java.awt.Component#revalidate()} manually.
     *
     * @param heightPercent 0 to 100% of the parent size (screen if null).
     */
    public void height(int heightPercent) {
        if (onscreenFrame != null) updateHeight(onscreenFrame.getParent(), onscreenFrame, heightPercent);
        if (offscreenFrame != null) updateHeight(offscreenFrame.getParent(), offscreenFrame, heightPercent);
    }

    private void updateWidth(java.awt.Component parent, java.awt.Component target, int widthPercent) {
        int parentWidth; // If no parent provided use the screen dimensions
        if (parent != null) parentWidth = parent.getWidth();
        else parentWidth =
                GraphicsEnvironment.isHeadless() ? 1920 // FHD
                        : Toolkit.getDefaultToolkit().getScreenSize().width;
        Dimension size = new Dimension(parentWidth / 100 * widthPercent, target.getHeight());
        target.setSize(size);
        target.setPreferredSize(size);
        target.setMaximumSize(size);
    }

    private void updateHeight(java.awt.Component parent, java.awt.Component target, int heightPercent) {
        int parentHeight; // If no parent provided use the screen dimensions
        if (parent != null) parentHeight = parent.getHeight();
        else parentHeight =
                GraphicsEnvironment.isHeadless() ? 1080 // FHD
                        : Toolkit.getDefaultToolkit().getScreenSize().height;
        Dimension size = new Dimension(target.getWidth(), parentHeight / 100 * heightPercent);
        target.setSize(size);
        target.setPreferredSize(size);
        target.setMaximumSize(size);
    }

    public UI plusX(int x) {
        onscreenFrame.setLocation(onscreenFrame.getX() + x, onscreenFrame.getY());
        return this;
    }

    public UI plusY(int y) {
        onscreenFrame.setLocation(onscreenFrame.getX(), onscreenFrame.getY() + y);
        return this;
    }

    /**
     * Returns new JS (JavaScript) code, that when executed in {@link #browser}
     * results in onJSFunctionExecuted being executed. <br>
     * It wraps around your jsCode and adds callback related stuff, as well as error handling.
     *
     * @param jsCode               modify the message variable in the provided JS (JavaScript) code to send information from JS to Java.
     *                             Your JS code could look like this: <br>
     *                             message = 'first second third etc...';
     * @param onJSFunctionExecuted executed when the provided jsCode executes successfully. String contains the message variable that can be set in your jsCode.
     * @param onJsFunctionFailed   executed when the provided jsCode threw an exception. String contains details about the exception/error.
     */
    public String addCallback(String jsCode, Consumer<String> onJSFunctionExecuted, Consumer<String> onJsFunctionFailed) {
        // 1. execute js code
        // 2. execute callback in java with params from js code
        // 3. return success to js code and execute it
        String id = String.valueOf(App.cefMessageRouterRequestId.getAndIncrement());
        App.cefMessageRouter.addHandler(new CefMessageRouterHandlerAdapter() {
            @Override
            public boolean onQuery(CefBrowser browser, CefFrame frame, long queryId, String request, boolean persistent, CefQueryCallback callback) {
                if (request.startsWith(id)) {
                    int iFirstSpace = request.indexOf(" ");
                    if (request.charAt(iFirstSpace - 1) == '!') // message looks like this: "3! Error details..." 3 is the id and can be any number
                        onJsFunctionFailed.accept(request.substring(iFirstSpace + 1));
                    else // message looks like this: "3 first second etc..." 3 is the id and can be any number
                        onJSFunctionExecuted.accept(request.substring(iFirstSpace + 1));
                    //callback.success("my_response");
                    return true;
                }
                return false;  // Not handled.
            }
        }, false);
        return "var message = '';\n" + // Separated by space
                "var error = null;\n" +
                "try{" + jsCode + "} catch (e) { error = e; }\n" +
                "window.cefQuery({request: '" + id + "'+(error == null ? (' '+message) : ('! '+error)),\n" +
                "                 persistent: false,\n" +
                "                 onSuccess: function(response) {},\n" + // for example: print(response);
                "                 onFailure: function(error_code, error_message) {} });\n";
    }

    public String jsGetComp(String varName, int id) {
        return "var " + varName + " = document.querySelectorAll('[java-id=\"" + id + "\"]')[0];\n";
    }

    /**
     * Registers this listener directly only if the page was loaded,
     * otherwise adds an action to {@link #onLoadStateChanged} to register the listener later.
     *
     * @param eventName name of the JavaScript event to listen for.
     * @param comp      component to register the listener on.
     * @param onEvent   executed when event happened. Has {@link #access(Runnable)}.
     */
    public <T> UI registerJSListener(String eventName, Component<T> comp, Consumer<String> onEvent) {
        synchronized (listenersAndComps) {
            List<Component<?>> alreadyRegisteredComps = listenersAndComps.get(eventName);
            if (alreadyRegisteredComps == null) {
                alreadyRegisteredComps = new ArrayList<>();
                listenersAndComps.put(eventName, alreadyRegisteredComps);
            }
            if (alreadyRegisteredComps.contains(comp))
                return this; // Already registered
            alreadyRegisteredComps.add(comp);
        }
        String jsNow = jsGetComp("comp", comp.id) +
                "comp.addEventListener(\"" + eventName + "\", (event) => {\n" +
                addCallback("function getObjProps(obj) {\n" +
                                "  var s = '{';\n" +
                                "  for (const key in obj) {\n" +
                                "    if (obj[key] !== obj && obj[key] !== null && obj[key] !== undefined) {\n" +
                                "      s += (`\"${key}\": \"${obj[key]}\",`);\n" +
                                "    }\n" +
                                "  }\n" +
                                "  if(s[s.length-1] == ',') s = s.slice(0, s.length-1);" + // Remove last ,
                                "  s += '}';\n" +
                                "  return s;\n" +
                                "}" +
                                "message = getObjProps(event)\n",
                        (message) -> {
                            access(() -> {
                                onEvent.accept(message); // Should execute all listeners
                            });
                        },
                        (error) -> {
                            throw new RuntimeException(error);
                        }) + // JS code that triggers Java function gets executed on a click event for this component
                "});\n";

        if (!isLoading) browser.executeJavaScript(jsNow, "internal", 0);
        else onLoadStateChanged.addAction((action, event) -> {
            if (event.isLoading) return;
            action.remove();
            browser.executeJavaScript(jsNow, "internal", 0);
        }, AL::warn);
        return this;
    }

    public DevToolsDialog openDevTools() {
        return new DevToolsDialog("DevTools", browser);
    }
}
