package com.osiris.desku;

import com.osiris.desku.swing.DevToolsDialog;
import com.osiris.desku.swing.FakeJFrame;
import com.osiris.desku.swing.Swing;
import org.cef.browser.CefBrowser;
import org.cef.browser.CefFrame;
import org.cef.callback.CefQueryCallback;
import org.cef.handler.CefMessageRouterHandlerAdapter;

import javax.swing.*;
import java.awt.*;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.IOException;
import java.util.concurrent.atomic.AtomicBoolean;
import java.util.function.Consumer;

/**
 * Native window with HTML content that is generated by provided {@link Route}.
 */
public class DesktopUI extends UI {
    public FakeJFrame offscreenFrame;
    public JFrame onscreenFrame;
    public CefBrowser browser;
    public java.awt.Component browserDesktopUI;

    public DesktopUI(Route route) throws IOException {
        this(route, false, 70, 60);
    }

    public DesktopUI(Route route, boolean isTransparent, int widthPercent, int heightPercent) throws IOException {
        super(route, isTransparent, widthPercent, heightPercent);
    }

    /**
     * Initialises/Displays the window and loads the HTML from the provided startURL.
     * To display a simple browser window, it suffices completely to create an
     * instance of the class CefBrowser and to assign its DesktopUI component to your
     * application (e.g. to your content pane).
     * But to be more verbose, this CTOR keeps an instance of each object on the
     * way to the browser DesktopUI.
     *
     * @param startURL      URL of the HTML content. Example: http://localhost or https://google.com or file:///ABSOLUTE_PATH_TO_HTML_FILE
     * @param isTransparent
     * @param widthPercent
     * @param heightPercent
     */
    public void init(String startURL, boolean isTransparent, int widthPercent, int heightPercent) throws Exception {
        boolean isOffscreen = ((DesktopUIManager) App.uiManager).isOffscreenRendering;
        AtomicBoolean isLoaded = new AtomicBoolean(false);
        onLoadStateChanged.addAction((action, event) -> {
            if (event.isError() || !event.isLoading) {
                action.remove();
                isLoaded.set(true);
            }
        }, Exception::printStackTrace);
        // (4) One CefBrowser instance is responsible to control what you'll see on
        //     the DesktopUI component of the instance. It can be displayed off-screen
        //     rendered or windowed rendered. To get an instance of CefBrowser you
        //     have to call the method "createBrowser()" of your CefClient
        //     instances.
        //
        //     CefBrowser has methods like "goBack()", "goForward()", "loadURL()",
        //     and many more which are used to control the behavior of the displayed
        //     content. The DesktopUI is held within a DesktopUI-Compontent which can be accessed
        //     by calling the method "getDesktopUIComponent()" on the instance of CefBrowser.
        //     The DesktopUI component is inherited from a java.awt.Component and therefore
        //     it can be embedded into any AWT DesktopUI.
        //browser = new CefBrowserWrOsr(App.cefClient, startURL, null);
        browser = ((DesktopUIManager) App.uiManager).cefClient.createBrowser(startURL, isOffscreen, isTransparent);
        if (isOffscreen) {
            // TODO JCEF has problems with triggering load events when in osr mode
            // TODO thus the below will not work correctly.
            isLoaded.set(true);
            offscreenFrame = new FakeJFrame();
            browserDesktopUI = browser.getUIComponent();

            // (6) All DesktopUI components are assigned to the default content pane of this
            //     JFrame and afterwards the frame is made visible to the user.
            offscreenFrame.add(browserDesktopUI, BorderLayout.CENTER);
            if (widthPercent <= 0 || heightPercent <= 0) {
                widthPercent = 100;
                heightPercent = 100;
            }
            width(widthPercent);
            height(heightPercent);
            //offscreenFrame.setIconImage(App.getIcon());
            //Swing.center(offscreenFrame);
            offscreenFrame.revalidate();
            offscreenFrame.setVisible(true);
            offscreenFrame.startRender((frame) -> {
            }, 250);
        } else {
            onscreenFrame = new JFrame(App.name);
            browserDesktopUI = browser.getUIComponent();

            // (6) All DesktopUI components are assigned to the default content pane of this
            //     JFrame and afterwards the frame is made visible to the user.
            onscreenFrame.getContentPane().add(browserDesktopUI, BorderLayout.CENTER);
            if (widthPercent <= 0 || heightPercent <= 0) {
                widthPercent = 100;
                heightPercent = 100;
            }
            width(widthPercent);
            height(heightPercent);
            onscreenFrame.setIconImage(App.getIcon());
            Swing.center(onscreenFrame);
            onscreenFrame.revalidate();
            onscreenFrame.setVisible(true);

            // (7) To take care of shutting down CEF accordingly, it's important to call
            //     the method "dispose()" of the CefApp instance if the Java
            //     application will be closed. Otherwise you'll get asserts from CEF.
            DesktopUI _this = this;
            onscreenFrame.addWindowListener(new WindowAdapter() {
                @Override
                public void windowClosing(WindowEvent e) {
                    UIManager.uis.remove(_this);
                    onscreenFrame.dispose();
                }
            });
        }
        // JavaScript cannot be executed before the page is loaded
        while (!isLoaded.get()) Thread.yield();
    }

    @Override
    public void close() {
        browser.doClose();
        super.close();
    }

    /**
     * This invalidates the container and thus to see changes in the DesktopUI
     * make sure execute {@link java.awt.Component#revalidate()} manually.
     *
     * @param widthPercent 0 to 100% of the parent size (screen if null).
     */
    public void width(int widthPercent) {
        if (onscreenFrame != null) updateWidth(onscreenFrame.getParent(), onscreenFrame, widthPercent);
        if (offscreenFrame != null) updateWidth(offscreenFrame.getParent(), offscreenFrame, widthPercent);
    }

    /**
     * This invalidates the container and thus to see changes in the DesktopUI
     * make sure execute {@link java.awt.Component#revalidate()} manually.
     *
     * @param heightPercent 0 to 100% of the parent size (screen if null).
     */
    public void height(int heightPercent) {
        if (onscreenFrame != null) updateHeight(onscreenFrame.getParent(), onscreenFrame, heightPercent);
        if (offscreenFrame != null) updateHeight(offscreenFrame.getParent(), offscreenFrame, heightPercent);
    }

    private void updateWidth(java.awt.Component parent, java.awt.Component target, int widthPercent) {
        int parentWidth; // If no parent provided use the screen dimensions
        if (parent != null) parentWidth = parent.getWidth();
        else parentWidth =
                GraphicsEnvironment.isHeadless() ? 1920 // FHD
                        : Toolkit.getDefaultToolkit().getScreenSize().width;
        Dimension size = new Dimension(parentWidth / 100 * widthPercent, target.getHeight());
        target.setSize(size);
        target.setPreferredSize(size);
        target.setMaximumSize(size);
    }

    private void updateHeight(java.awt.Component parent, java.awt.Component target, int heightPercent) {
        int parentHeight; // If no parent provided use the screen dimensions
        if (parent != null) parentHeight = parent.getHeight();
        else parentHeight =
                GraphicsEnvironment.isHeadless() ? 1080 // FHD
                        : Toolkit.getDefaultToolkit().getScreenSize().height;
        Dimension size = new Dimension(target.getWidth(), parentHeight / 100 * heightPercent);
        target.setSize(size);
        target.setPreferredSize(size);
        target.setMaximumSize(size);
    }

    public void plusX(int x) {
        onscreenFrame.setLocation(onscreenFrame.getX() + x, onscreenFrame.getY());
    }

    public void plusY(int y) {
        onscreenFrame.setLocation(onscreenFrame.getX(), onscreenFrame.getY() + y);
    }

    @Override
    public void executeJavaScript(String jsCode, String jsCodeSourceName, int jsCodeStartingLineNumber) {
        browser.executeJavaScript(jsCode, "internal", 0);
    }

    /**
     * Returns new JS (JavaScript) code, that when executed in {@link #browser}
     * results in onJSFunctionExecuted being executed. <br>
     * It wraps around your jsCode and adds callback related stuff, as well as error handling.
     *
     * @param jsCode               modify the message variable in the provided JS (JavaScript) code to send information from JS to Java.
     *                             Your JS code could look like this: <br>
     *                             message = 'first second third etc...';
     * @param onJSFunctionExecuted executed when the provided jsCode executes successfully. String contains the message variable that can be set in your jsCode.
     * @param onJsFunctionFailed   executed when the provided jsCode threw an exception. String contains details about the exception/error.
     */
    public String addCallback(String jsCode, Consumer<String> onJSFunctionExecuted, Consumer<String> onJsFunctionFailed) {
        // 1. execute js code
        // 2. execute callback in java with params from js code
        // 3. return success to js code and execute it
        String id = String.valueOf(((DesktopUIManager) App.uiManager).cefMessageRouterRequestId.getAndIncrement());
        ((DesktopUIManager) App.uiManager).cefMessageRouter.addHandler(new CefMessageRouterHandlerAdapter() {
            @Override
            public boolean onQuery(CefBrowser browser, CefFrame frame, long queryId, String request, boolean persistent, CefQueryCallback callback) {
                if (request.startsWith(id)) {
                    int iFirstSpace = request.indexOf(" ");
                    if (request.charAt(iFirstSpace - 1) == '!') // message looks like this: "3! Error details..." 3 is the id and can be any number
                        onJsFunctionFailed.accept(request.substring(iFirstSpace + 1));
                    else // message looks like this: "3 first second etc..." 3 is the id and can be any number
                        onJSFunctionExecuted.accept(request.substring(iFirstSpace + 1));
                    //callback.success("my_response");
                    return true;
                }
                return false;  // Not handled.
            }
        }, false);
        return "var message = '';\n" + // Separated by space
                "var error = null;\n" +
                "try{" + jsCode + "} catch (e) { error = e; }\n" +
                "window.cefQuery({request: '" + id + "'+(error == null ? (' '+message) : ('! '+error)),\n" +
                "                 persistent: false,\n" +
                "                 onSuccess: function(response) {},\n" + // for example: print(response);
                "                 onFailure: function(error_code, error_message) {} });\n";
    }

    public DevToolsDialog openDevTools() {
        return new DevToolsDialog("DevTools", browser);
    }
}
